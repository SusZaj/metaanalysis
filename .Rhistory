# About this course
```{r diagram decision tree abstracts, fig.width=10, fig.height=6, echo=FALSE, message=FALSE}
par(mar=c(1,1,1,1))
openplotmat() #create an empyty plot
elpos <- coordinates (pos = c(2, 2, 2, 2, 2))
fromto <- matrix(ncol = 2, byrow = TRUE, data = c(1,2, 1,3, 3,4, 3,5, 5,6, 5,7, 7,8, 7,9))
nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for (i in 1:nr) (arrpos[i, ] <- straightarrow (to = elpos[fromto[i, 2], ], from = elpos[fromto[i, 1], ], lwd = 2, arr.pos = 0.7, arr.length = 0.4, arr.type = "simple"))
textrect (mid = elpos[1,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("Study on non-human","multicellular animal?"), box.col = "white", shadow.col = "grey", shadow.size = 0, cex = 0.6)
library(diagram)
package(diagram)
install.package(diagram)
install.package(diagram)
```{r diagram decision tree abstracts, fig.width=10, fig.height=6, echo=FALSE, message=FALSE}
par(mar=c(1,1,1,1))
install.packages(diagram)
library(diagram)
openplotmat() #create an empyty plot
elpos <- coordinates (pos = c(2, 2, 2, 2, 2))
fromto <- matrix(ncol = 2, byrow = TRUE, data = c(1,2, 1,3, 3,4, 3,5, 5,6, 5,7, 7,8, 7,9))
nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for (i in 1:nr) (arrpos[i, ] <- straightarrow (to = elpos[fromto[i, 2], ], from = elpos[fromto[i, 1], ], lwd = 2, arr.pos = 0.7, arr.length = 0.4, arr.type = "simple"))
install.packages(diagram)
install.packages("diagram")
par(mar=c(1,1,1,1))
openplotmat() #create an empyty plot
elpos <- coordinates (pos = c(2, 2, 2, 2, 2))
fromto <- matrix(ncol = 2, byrow = TRUE, data = c(1,2, 1,3, 3,4, 3,5, 5,6, 5,7, 7,8, 7,9))
nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for (i in 1:nr) (arrpos[i, ] <- straightarrow (to = elpos[fromto[i, 2], ], from = elpos[fromto[i, 1], ], lwd = 2, arr.pos = 0.7, arr.length = 0.4, arr.type = "simple"))
textrect (mid = elpos[1,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("Study on non-human","multicellular animal?"), box.col = "white", shadow.col = "grey", shadow.size = 0, cex = 0.6)
textellipse (mid = elpos[2,], radx = 0.15, rady = 0.05, lwd = 1, lab = "EXCLUDE", box.col = "coral1", shadow.col = "grey", shadow.size = 0, cex = 0.8)
textrect (mid = elpos[3,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("Experimental study?"), box.col = "white", shadow.col = "grey", shadow.size = 0, cex = 0.6)
textellipse (mid = elpos[4,], radx = 0.15, rady = 0.05, lwd = 1, lab = "EXCLUDE", box.col = "coral1", shadow.col = "grey", shadow.size = 0.001, cex = 0.8)
textrect (mid = elpos[5,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("Experimental","immune challenge?"), box.col = "white", shadow.col = "grey", shadow.size = 0, cex = 0.6)
textellipse (mid = elpos[6,], radx = 0.15, rady = 0.05, lwd = 1, lab = "EXCLUDE", box.col = "coral1", shadow.col = "grey", shadow.size = 0, cex = 0.8)
textrect (mid = elpos[7,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("Reproduction-related","traits measured?"), box.col = "white", shadow.col = "grey", shadow.size = 0, cex = 0.6)
textellipse (mid = elpos[8,], radx = 0.15, rady = 0.05, lwd = 1, lab = "EXCLUDE", box.col = "coral1", shadow.col = "grey", shadow.size = 0, cex = 0.8)
textellipse (mid = elpos[9,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("INCLUDE", "for full-text screening"), box.col = "light green", shadow.col = "grey", shadow.size = 0, cex = 0.8)
text(arrpos[1, 1] - 0.1, arrpos[1, 2] + 0.02, "no")
text(arrpos[2, 1] + 0.07, arrpos[2, 2] + 0.03, "yes/probably")
text(arrpos[3, 1] - 0.1, arrpos[3, 2] + 0.02, "no")
text(arrpos[4, 1] + 0.07, arrpos[4, 2] + 0.03, "yes/probably")
text(arrpos[5, 1] - 0.1, arrpos[5, 2] + 0.02, "no")
text(arrpos[6, 1] + 0.07, arrpos[6, 2] + 0.03, "yes/probably")
text(arrpos[7, 1] - 0.1, arrpos[7, 2] + 0.02, "no")
text(arrpos[8, 1] + 0.07, arrpos[8, 2] + 0.03, "yes/probably")
```{r diagram decision tree abstracts, fig.width=10, fig.height=6, echo=FALSE, message=FALSE}
install.packages("diagram")
library(diagram)
par(mar=c(1,1,1,1))
openplotmat() #create an empyty plot
elpos <- coordinates (pos = c(2, 2, 2, 2, 2))
fromto <- matrix(ncol = 2, byrow = TRUE, data = c(1,2, 1,3, 3,4, 3,5, 5,6, 5,7, 7,8, 7,9))
nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for (i in 1:nr) (arrpos[i, ] <- straightarrow (to = elpos[fromto[i, 2], ], from = elpos[fromto[i, 1], ], lwd = 2, arr.pos = 0.7, arr.length = 0.4, arr.type = "simple"))
par(mar=c(1,1,1,1))
openplotmat() #create an empyty plot
elpos <- coordinates (pos = c(2, 2, 2, 2, 2))
fromto <- matrix(ncol = 2, byrow = TRUE, data = c(1,2, 1,3, 3,4, 3,5, 5,6, 5,7, 7,8, 7,9))
nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for (i in 1:nr) (arrpos[i, ] <- straightarrow (to = elpos[fromto[i, 2], ], from = elpos[fromto[i, 1], ], lwd = 2, arr.pos = 0.7, arr.length = 0.4, arr.type = "simple"))
textrect (mid = elpos[1,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("Study on non-human","multicellular animal?"), box.col = "white", shadow.col = "grey", shadow.size = 0, cex = 0.6)
textellipse (mid = elpos[2,], radx = 0.15, rady = 0.05, lwd = 1, lab = "EXCLUDE", box.col = "coral1", shadow.col = "grey", shadow.size = 0, cex = 0.8)
textrect (mid = elpos[3,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("Experimental study?"), box.col = "white", shadow.col = "grey", shadow.size = 0, cex = 0.6)
textellipse (mid = elpos[4,], radx = 0.15, rady = 0.05, lwd = 1, lab = "EXCLUDE", box.col = "coral1", shadow.col = "grey", shadow.size = 0.001, cex = 0.8)
textrect (mid = elpos[5,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("Experimental","immune challenge?"), box.col = "white", shadow.col = "grey", shadow.size = 0, cex = 0.6)
textellipse (mid = elpos[6,], radx = 0.15, rady = 0.05, lwd = 1, lab = "EXCLUDE", box.col = "coral1", shadow.col = "grey", shadow.size = 0, cex = 0.8)
textrect (mid = elpos[7,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("Reproduction-related","traits measured?"), box.col = "white", shadow.col = "grey", shadow.size = 0, cex = 0.6)
textellipse (mid = elpos[8,], radx = 0.15, rady = 0.05, lwd = 1, lab = "EXCLUDE", box.col = "coral1", shadow.col = "grey", shadow.size = 0, cex = 0.8)
textellipse (mid = elpos[9,], radx = 0.15, rady = 0.05, lwd = 1, lab = c("INCLUDE", "for full-text screening"), box.col = "light green", shadow.col = "grey", shadow.size = 0, cex = 0.8)
text(arrpos[1, 1] - 0.1, arrpos[1, 2] + 0.02, "no")
text(arrpos[2, 1] + 0.07, arrpos[2, 2] + 0.03, "yes/probably")
text(arrpos[3, 1] - 0.1, arrpos[3, 2] + 0.02, "no")
text(arrpos[4, 1] + 0.07, arrpos[4, 2] + 0.03, "yes/probably")
text(arrpos[5, 1] - 0.1, arrpos[5, 2] + 0.02, "no")
text(arrpos[6, 1] + 0.07, arrpos[6, 2] + 0.03, "yes/probably")
text(arrpos[7, 1] - 0.1, arrpos[7, 2] + 0.02, "no")
text(arrpos[8, 1] + 0.07, arrpos[8, 2] + 0.03, "yes/probably")
```{r tree exmaple1, eval=TRUE, echo=FALSE, fig.width=6, fig.height=4, fig.cap=" "}
library(ape)
par(mfcol=c(1,2))
plot(read.tree(text = "(((Species4, Species3), Species2), Species1);"), main = "no branch lengths")
plot(read.tree(text = "(((Species4:0.1, Species3:0.1):0.3, Species2:0.4):1.9, Species1:2.3);"), main = "with branch lengths", use.edge.length = TRUE)
```
```{r diagram, fig.width=10, fig.height=10, echo=FALSE, message=FALSE}
par(mar=c(1,1,1,1))
openplotmat()
elpos <- coordinates (pos = c(1, 1, 4, 1, 1, 2, 1))
fromto <- matrix(ncol = 2, byrow = TRUE, data = c(1,2, 2,3, 2,4, 2,5, 2,6, 3,7, 4,7, 5,7, 6,7, 7,8, 8,9, 8,10, 9,11, 10,11, 8,11, 4,3 ))
nr <- nrow(fromto)
arrpos <- matrix(ncol = 2, nrow = nr)
for (i in 1:nr) (arrpos[i, ] <- straightarrow (to = elpos[fromto[i, 2], ],from = elpos[fromto[i, 1], ],lwd = 2, arr.pos = 0.6, arr.length = 0.5))
textrect (mid = elpos[1,], radx = 0.1, rady = 0.05, lwd = 2, lab = "species list", box.col = "white", shadow.col = "grey", shadow.size = 0.005, cex = 1.5)
textellipse (mid = elpos[2,], radx = 0.1, rady = 0.05, lwd = 1, lab = "supertree or bigger tree exists?", box.col = "white", shadow.col = "grey", shadow.size = 0.005, cex = 1)
textrect (mid = elpos[3,], radx = 0.1, rady = 0.05, lwd = 1, lab = c("prune","supertree"), box.col = "white", shadow.col = "grey", shadow.size = 0.001, cex = 1.2)
textrect (mid = elpos[4,], radx = 0.1, rady = 0.05, lwd = 1, lab = c("merge","supertrees"), box.col = "white", shadow.col = "grey", shadow.size = 0.001, cex = 1)
textrect (mid = elpos[5,], radx = 0.1, rady = 0.05, lwd = 1, lab = c("generate","taxonomic"," tree using NCBI"), box.col = "white", shadow.col = "grey", shadow.size = 0.001, cex = 0.8)
textrect (mid = elpos[6,], radx = 0.1, rady = 0.05, lwd = 1, lab = c("generate","phylogeny","from sequences"), box.col = "white", shadow.col = "grey", shadow.size = 0.001, cex = 0.8)
textrect (mid = elpos[7,], radx = 0.1, rady = 0.05, lwd = 1, lab = "preliminary tree", box.col = "white", shadow.col = "grey", shadow.size = 0.005, cex = 1.5)
textellipse (mid = elpos[8,], radx = 0.1, rady = 0.05, lwd = 1, lab = "resolve polytomies?", box.col = "white", shadow.col = "grey", shadow.size = 0.005, cex = 1)
textrect (mid = elpos[9,], radx = 0.1, rady = 0.05, lwd = 1, lab = c("using existing","information"), box.col = "white", shadow.col = "grey", shadow.size = 0.001, cex = 1.2)
textrect (mid = elpos[10,], radx = 0.1, rady = 0.05, lwd = 1, lab = c("at random"), box.col = "white", shadow.col = "grey", shadow.size = 0.001, cex = 1.2)
textrect (mid = elpos[11,], radx = 0.1, rady = 0.05, lwd = 2, lab = "final tree", box.col = "white", shadow.col = "grey", shadow.size = 0.005, cex = 1.5)
text(arrpos[2, 1] + 0.00, arrpos[2, 2] + 0.02, "yes")
text(arrpos[3, 1] - 0.01, arrpos[3, 2] + 0.02, "no")
text(arrpos[4, 1] + 0.01, arrpos[4, 2] + 0.02, "no")
text(arrpos[5, 1] + 0.01, arrpos[5, 2] + 0.02, "no")
text(arrpos[11, 1] + 0.00, arrpos[11, 2] + 0.02, "yes")
text(arrpos[12, 1] - 0.01, arrpos[12, 2] + 0.02, "yes")
text(arrpos[15, 1] + 0.015, arrpos[15, 2] + 0.1, "no")
```
install.packages(c("fulltext", "rotl", "treebase"))
# We can use the print() function
print("Hi, my name is Susi!")
print("Hi, my name is __!")
library(dplyr)
data(metafor)
library(metafor)
data(metafor)
data()
str(dat.bourassa1996)
str(curtis1998)
str(dat.curtis1998)
<br>
birds <- unique(read.csv("./binder/data/bird_list.csv")$species_name)  #load our list of bird species, listing each name once
birds <- unique(read.csv("./binder/data/bird_list.csv")$species_name)
birds_stree <- read.tree("./binder/data/Ericson.tre")
birds_stree
intersect(as.character(birds_stree$tip.label), birds)
setdiff(birds, as.character(birds_stree$tip.label))
intersect(as.character(birds_stree$tip.label), birds) #51 - all our species matching
setdiff(birds, as.character(birds_stree$tip.label)) #0 mismatches - no typos
# we can now reduce (prune) the supertree to maatch our selection
pruned_birds_stree <- drop.tip(birds_stree,birds_stree$tip.label[-match(birds, birds_stree$tip.label)])
#check the pruned tree
is.binary.tree(pruned_birds_stree) #TRUE
is.ultrametric(pruned_birds_stree) #TRUE
has.singles(pruned_birds_stree) #check for singles - the single nodes (i.e., with a single descendant) in a tree
# pruned_birds_stree <- collapse.singles(pruned_birds_stree)
#i
source('~/susi/LMJU/Meta-Analyses/WebCourse/metaanalysis/exercises/exc_birds.R')
pruned_birds_stree <- drop.tip(birds_stree,birds_stree$tip.label[-match(birds, birds_stree$tip.label)])
#check the pruned tree
is.binary.tree(pruned_birds_stree) #TRUE
is.ultrametric(pruned_birds_stree) #TRUE
has.singles(pruned_birds_stree) #check for singles - the single nodes (i.e., with a single descendant) in a tree
# pruned_birds_stree <- collapse.singles(pruned_birds_stree)
#if singles are preset, you can clean them up using collapse.singles function
#if you want to run this, delete the "#" in front of and pruned_birds_stree <- ... & run code!
# And FINALLY: Plote the tree
plot(pruned_birds_stree, cex=0.8) #plots with branch lengths, when available
plot(pruned_birds_stree, cex=1.2)
# And FINALLY: Plote the tree
plot(pruned_birds_stree, cex=1.2)
source('~/susi/LMJU/Meta-Analyses/WebCourse/metaanalysis/exercises/exc_birds.R')
dat <- metafor::dat.curtis1998
str(dat) #102 rows, many columns including various data
species_Curtis1998 <- paste(dat$genus, dat$species, sep=" ")
# str(species_Curtis1998) # if you want to see what the dataframe structure loks like
species_Curtis1998 <- unique(tolower(species_Curtis1998)) #make species name unique
length(species_Curtis1998) # should be 37
species_Curtis1998 #note: "populusx euramericana" should be same as "populus euramericana"
species_Curtis1998 <- gsub("populusx euramericana", "populus euramericana", species_Curtis1998) #merge, # but potentially fix in the main data set!
species_Curtis1998 <- unique(tolower(species_Curtis1998)) #make the names unique again
length(species_Curtis1998) #36
species_Curtis1998 <- paste(toupper(substr(species_Curtis1998, 1, 1)), substr(species_Curtis1998, 2, nchar(species_Curtis1998)), sep="") #capitalise first letters
species_Curtis1998 # shows your list
```
You can now run your 36 unique species_Curtis1998 names in a *rotl* search
```
taxa <- tnrs_match_names(names = species_Curtis1998)
dim(taxa) #36 species
#this is an example of how to search for a single species:
# Acer <- search_treebase("Acer_saccharinumc", by="taxon", max_trees=10) #example of using with a single species name - note different commas than in the tutorial and the underscores!
Acer_treebase <- search_treebase(Acer4sp_string, by=c("taxon","taxon","taxon","taxon"), max_trees=50, exact_match = TRUE, only_metadata = TRUE) #note different commas than in the treebase tutorial!
Acer4sp <- species_Curtis1998[grep("Acer ", species_Curtis1998)]
Acer4sp #you should get "Acer rubrum"        "Acer saccharinum"   "Acer pensylvanicum" "Acer saccharum"
Acer4sp <- gsub(" ","_", Acer4sp) #put underscores back in the names
Acer4sp_string <- paste(Acer4sp, sep = "", collapse = ' and ')
Acer4sp_string #you should get "Acer_rubrum and Acer_saccharinum and Acer_pensylvanicum and Acer_saccharum"
#this is an example of how to search for a single species:
# Acer <- search_treebase("Acer_saccharinumc", by="taxon", max_trees=10) #example of using with a single species name - note different commas than in the tutorial and the underscores!
Acer_treebase <- search_treebase(Acer4sp_string, by=c("taxon","taxon","taxon","taxon"), max_trees=50, exact_match = TRUE, only_metadata = TRUE) #note different commas than in the treebase tutorial!
birds <- unique(read.csv("./binder/data/bird_list.csv")$species_name)  #load our list of bird species,
# "unique" will make sure we're listing each species name only once
birds_stree <- read.tree("./binder/data/Ericson.tre") #load provided bird supertree
birds_stree # 9993 tips = species
### checking for the overlap between species name from our list  and the bird supertree
intersect(as.character(birds_stree$tip.label), birds) #51 - all our species matching
setdiff(birds, as.character(birds_stree$tip.label)) #0 mismatches - no typos
# we can now reduce (prune) the supertree to maatch our selection
pruned_birds_stree <- drop.tip(birds_stree,birds_stree$tip.label[-match(birds, birds_stree$tip.label)])
#check the pruned tree
is.binary.tree(pruned_birds_stree) #TRUE
is.ultrametric(pruned_birds_stree) #TRUE
has.singles(pruned_birds_stree) #check for singles - the single nodes (i.e., with a single descendant) in a tree
# And FINALLY: Plot the tree
plot(pruned_birds_stree, cex=1.2) #plots with branch lengths, when available
